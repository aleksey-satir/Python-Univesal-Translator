#!/usr/bin/python3.9
import os
import sys
from typing import List, Optional
import pprint
import typer

from transPYler import transpiler


def main(
        _file: typer.FileText = typer.Argument(
            'index.py',
            metavar='FILE',
            help='Name of file for transpilation'
        ),
        tmpl: List[typer.FileText] = typer.Option(
            None,
            '-t',
            '--templ',
            help='Names of template file'
        ),
        out: typer.FileTextWrite = typer.Option(
            sys.stdout,
            '-o',
            '--out',
            help='Output file',
            show_default='stdout'
        ),
        input_lang: Optional[str] = typer.Option(
            'Ð’etermined by the filename',
            '-l',
            '--lang',
            help='Marking the entrance language (py, hy, coco)'
        ),
        target: Optional[str] = typer.Option(
            '',
            '--target',
            show_default=None
        ),
        save_target: bool = typer.Option(
            False,
            '-st',
            '--savetarget=',
            show_default=None
        )
):
    if not(tmpl or target):
        typer.echo('You must send at least one template file')
        raise typer.Abort()
    tmpl = list(tmpl)
    if os.path.isdir(target):
        if 'init.tp' in os.listdir(target):
            for i in open(f'{dirr}/init.tp', 'r'):
                tmpl.append(open(f'{dirr}/{i}', 'r'))
        else:
            for dirr,_,files in os.walk(target):
                for i in files:
                    if i.split('.')[-1] == 'tp':
                        tmpl.append(open(f'{dirr}/{i}', 'r'))
    input_lang = {
        'py': 'py',
        'python': 'py',
        'hy': 'hy',
        'hylang': 'hy',
        'coco': 'coco',
        'coconut': 'coconut'
    }.get(_file.name.split('.')[-1])
    tr = transpiler(*list(map(lambda t: t.read(), tmpl)))
    result = tr.generate(_file.read(), lang=input_lang)
    print(result, file=out)

if __name__ == '__main__':
     typer.run(main)
