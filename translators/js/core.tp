name: "{{name}}"
const: &const "{{val}}"
Int: *const
Float: *const
Bool: "{{val|lower}}"
Str: "'{{val}}'"

operators:
  "or": "||"
  "and": "&&"
  "not": "!"
  "is": "==="

bin_op: "({{left}} {{op}} {{right}})"
un_op: "{{op}}{{el}}"

callfunc: "{{func}}({{args|join(', ')}})"
getattr: "{{obj}}.{{attr}}"
callmethod: "{{obj}}.{{attr}}({{args|join(', ')}})"
arg: "{{name}}"

List: "[{{ls|join(', ')}}]"
Tuple: "[{{ls|join(', ')}}]"
Dict: >-
  new Map([
  {%-set _dict = []-%}
  {%-for kw in keys_val-%}
    {{_dict.append('['+kw|join(', ')+']') or ''}}
  {%-endfor-%}
  {{_dict|join(', ')}}])

index: >-
  {{obj}}
  {%- if isinstance(obj.type, list) -%}[
     {%- if key < 0 -%}
        {{obj}}.length+{{key}}
     {%- elif key >= 0 -%}
        {{key}}
     {%- else -%}
      ({{key}}<0)?({{obj}}.length+{{key}}):({{key}})
    {%-endif-%}]
  {%- elif isinstance(obj.type, dict) -%}
    {%- if ctx == 'load' -%}
    .get({{key}})|| (()=>{throw "key error"})()
    {%-else-%}
    [{{key}}]
    {%-endif-%}
  {%- endif -%}

slice: |-
  {%- if step == 1 -%}
    {{obj}}.slice({{low}}, {{up}})
  {%- elif step != 0 -%}
    {%- if step < 0 -%}
        [...{{obj}}].reverse()
    {%- elif step > 0 -%}
        {{obj}}
    {%- else -%}
      ({{step}}<0?[...{{obj}}].reverse():{{obj}})
    {%- endif -%}
    {%-if low() != '' or up() != ''-%}
      .slice(...({{step}}<0?[{{up}}, {{low}}]:[{{low}}, {{up}}]))
    {%-endif-%}
    {%-if step != -1-%}
      .filter((_,i)=>(i%{{step}})==0)
    {%-endif-%}
  {%-endif-%}

expr: "{{value}};"

assign: &assign "{{var}} = {{value}};"
set_attr: *assign
new_attr: *assign
assignment_by_key: *assign
new_key: *assign
new_var: "let {{var}} = {{value}};"

if: "if ({{condition}}) {{body}} {{els}}"
elif: "else if ({{condition}}) {{body}} {{els}}"
else: "else {{body}}"

func: "function {{name}}({{args|join(', ')}}) {{body}}"

return: "return {{value}};"

while: "while ({{condition}}) {{body}}"

for: >-
  for (let {{var}}
  {{'in' if isinstance(obj.type, dict) else 'of'}}
  {{obj}})
  {{body}}

c_like_for: >-
  for (let {{var}} = {{start}}; 
  {%- if step < 0-%}
    {{var}} > {{finish}}
  {%- elif step > 0 -%}
    {{var}} < {{finish}}
  {%- else -%}
    ({{step}}<0?{{var}}>{{finish}}:{{var}}<{{finish}})
  {%- endif -%};
  {{var}} += {{step}})
  {{body}}

break: "break;"
continue: "continue;"

class: |-
  class {{name}} {{'{'}}
  {{'    '*nl}}{{attrs|join('\n'+'    '*(nl))}}
  {{'    '*nl}}{{init}}
  {{'    '*nl}}{{methods|join('\n'+'    '*(nl))}}
  {{'    '*(nl-1)}}}

init: "constructor({{(args[1:])|join(', ')}}) {{body}}"
method: "{{name}}({{(args[1:])|join(', ')}}) {{body}}"
self: "this"
attr: "{{var}} = {{value}};"
new: "new {{func}}({{args|join(', ')}})"

body: |-
  {{'{'}}{%for st in body%}
  {{'    '*nl}}{{st}}{%endfor%}
  {{'    '*(nl-1)}}}
