name: "{{name}}"
const: &const "{{val}}"
Int: *const
Float: *const
Bool: "{{val|lower}}"
Str: "\"{{val}}\""

operators:
  "or": "||"
  "and": "&&"
  "not": "!"
  "is": "=="

bin_op: "({{left()}} {{op}} {{right()}})"
un_op: "{{op}}{{el()}}"

callfunc: "{{func()}}({{args|map(attribute='val')|join(', ')}})"
attr: "{{obj()}}.{{attr}}"
callmethod: "{{obj()}}.{{attr}}({{args|map(attribute='val')|join(', ')}})"
arg: "{{name}} {{_type}}"

List: "{{_type}}{{'{'}}{{ls|map(attribute='val')|join(', ')}}}"
Tuple: "[{{ls|map(attribute='val')|join(', ')}}]"
Dict: "{{'{'}}{%for i in key_val%}{{i.key()}}: {{i.val()}},{%endfor%}}"

index: |-
  {%- if isinstance(obj.type, List) -%}
    {{- env.use('Index') -}}
    {{obj()}}[Index({{key()}}, len({{obj()}}))]
  {%- endif -%}
slice: |-
  {%-if step() == '1'-%}
    {{-env.use('Index')-}}
    {{obj()}}[{{low()}}:Index({{up()}}, len({{obj()}}))]
  {%-endif-%}

expr: "{{value()}}"
assign: "{{var()}} = {{value()}}"
new_var: "{{var()}} := {{value()}}"

if: "if ({{condition()}}) {{body()}} {{els()}}"
elif: "else if ({{condition()}}) {{body()}} {{els()}}"
else: "else {{body()}}"

func: "{{name}} := func ({{args|map(attribute='val')|join(', ')}}) {{ret_type}} {{body()}}"

return: "return {{value()}}"

while: "for {{condition()}} {{body()}}"

for: for _, {{var()}} := range {{obj()}} {{body()}}

c_like_for: >-
  for {{var()}} := {{start()}};
  ({{step()}} < 0 && {{var()}} > {{finish()}}) || ({{var()}} < {{finish()}});
  {{var()}} += {{step()}}
  {{body()}}

break: "break;"
continue: "continue;"

types:
  list: "[]{{el_type}}"
  str: string

body: |-
  {{'{'}}{%for st in body%}
  {{'    '*nl}}{{st()}}{%endfor%}
  {{'    '*(nl-1)}}}

main: |-
  package main
  {% if env.used %}
  import ({%- for used in env.used -%}
      {% if used.startswith('mod_')%}{{'\n    '}}"{{used[4:]}}"{%endif%}
  {%- endfor -%}{{'\n'}})
  {% if 'Index' in env.used %}
  func Index(index, ln int) int {{'{'}}
      if index < 0 {{'{'}}
          return ln + index
      }
      return index
  }
  {% endif %}
  {% endif %}
  {{'func main(){'}}{%for st in body%}
      {{st}}{%endfor%}
  }
